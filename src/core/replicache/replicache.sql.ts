import {
  text,
  integer,
  primaryKey,
  sqliteTable,
} from "drizzle-orm/sqlite-core";
import { timestamps, id, userID } from "@/utils/sql";

export const replicache_space = sqliteTable("replicache_space", {
  // Globally unique ID, generated by Replicache.
  ...id,
  version: integer("version").notNull(),
});

export const replicache_client_group = sqliteTable("replicache_client_group", {
  ...userID,
});

// An instance of the Replicache JS class that has ever synced with the server.
export const replicache_client = sqliteTable("replicache_client", {
  ...id,
  // The ClientGroup this client is part of.
  clientGroupID: text("client_group_id", { length: 36 }).notNull(), // references => replicache_client_group(id)
  // Last mutation the server has processed from this client.
  lastMutationID: integer("last_mutation_id").default(0).notNull(),
  // The global version this client was last modified at.
  lastModifiedVersion: integer("last_modified_version").notNull(),
});


// TODO: domain entities will have two extra fields (lastModifiedVersion, deleted)
// deleted can be a integer/timestamp

// export const replicache_client_group = sqliteTable(
//   "replicache_client_group",
//   {
//     ...timestamps,
//     id: text("id", { length: 36 }).notNull(),
//     actor: text("actor", { mode: "json" }).$type<Actor>(),
//     cvrVersion: integer("cvr_version").notNull(),
//     clientVersion: integer("client_version").notNull(),
//   },
//   (table) => ({
//     primary: primaryKey({ columns: [table.id] }),
//   })
// );

// export const replicache_client = sqliteTable("replicache_client", {
//   id: text("id", { length: 36 }).notNull().primaryKey(),
//   mutationID: integer("mutation_id").default(0).notNull(),
//   ...timestamps,
//   clientGroupID: text("client_group_id", { length: 36 }).notNull(),
//   clientVersion: integer("client_version").notNull(),
// });

// export const replicache_cvr = sqliteTable(
//   "replicache_cvr",
//   {
//     ...id,
//     ...timestamps,
//     data: text("data", {
//       mode: "json",
//     })
//       .$type<Record<string, number>>()
//       .notNull(),
//     id: integer("id").notNull(),
//     clientGroupID: text("client_group_id", { length: 36 }).notNull(),
//     clientVersion: integer("client_version").notNull(),
//   },
//   (table) => ({
//     primary: primaryKey({ columns: [table.clientGroupID, table.id] }),
//   })
// );
